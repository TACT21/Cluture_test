@page "/movie/{id}"

@using bluem_of_youth.Shared;
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<h3>Video</h3>
@state

<section>
    @*Loading*@
    @if(state == 0)
    {
        <h3>発見できませんでした。 </h3>
        <p>state code : @state</p>
    }
    @*On server*@
    else if(state == 1)
    {
        <video id="video" width="400" height="300">
            @foreach (var item in video.url)
           {
                <source src="@item">
           }
        </video>
    }
    @*Using web service cf.)niconico & youtube etc...*@
    else if(state == 2)
    {
        <iframe src="@video.url[0]"></iframe>
    }
    @*if error*@
    else if(state == 3 && ex != null){
        <bluem_of_youth.Client.Shared.Error.Error404 Errormessage="@ex.Message"/>
    }
    @*Unexpect sorce*@
    else
    {
        <bluem_of_youth.Client.Shared.Error.Error418/>
    }
</section>
@if (video != null  && videos != null)
{
    <section style="grid-row: 2;" class="detail">
        <h1>@video.title</h1>
        <p></p>
        <div class="button">
            <a href="">Vote this group</a>
            <a href="">Show me this class detail</a>
        </div>
    </section>
    <section style="grid-row: 3;" class="detail">
        <h1>Watch more</h1>
        <div class="links">
            @foreach (var item in videos)
           {
               <a href="@item.url" class="videocard">
                   <img src="@item.thumbnail"/>
                       <div>
                            <h3 class="title">@item.title</h3>
                    </div>
               </a>
           }
        </div>
    </section>
}

@code {
    [Parameter]
    public string? id{ set; get; }
    public byte state = 0;
    List<VideoLink>? videos = null;
    Video? video = null;
    private HubConnection? hubConnection;
    private Exception? ex;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/VideoHub"))
        .Build();

            hubConnection.On<List<VideoLink>>("SetLink", (links) =>
            {
                videos = links;
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
            if(hubConnection?.State == HubConnectionState.Connected)
            {
            await hubConnection.SendAsync("GetLinks",id);
            }
        }
        catch(Exception e)
        {
            ex = e;  
            state = 3;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}