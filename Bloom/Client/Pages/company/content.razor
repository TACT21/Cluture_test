@using Bloom.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text
@using System.IO
@using System.Xml.Serialization
@using Bloom.Client

@page "/Company/{paramstr}"

@inject NavigationManager nV

@implements IAsyncDisposable

@if(state == 1){
    <main>
        <div class="loading">
            <Loading />
        </div>
    </main>
}else if(state == 2){
        <main>
        <header class="">
            <div>
                <div>
                    <p class="orgtitle">@detail.name</p>
                    <p class="orgsubtitle">@detail.enname</p>
                </div>
            </div>
            <div class="poster">
                <button>＜</button>
                <div>
                    <img src="@poster.Url" class="posterimg" />
                    <button class="btn vote" @onclick="Vote">いいね!</button>
                </div>
                <button>＞</button>
            </div>
        </header>
        @if(isCM || isMovie){
            <section class="contener">
                <div class="videocontener sectitles">
                    <div>
                        <h3 class="section_title">
                            <img src="./img/icon/video.svg" class="icon" />
                            Video
                        </h3>
                        <p class="section_subtitle">動画とCM</p>
                    </div>
                    <div>
                        @if (isCM && isMovie)
                        {
                            <button class="btn" onclick="@Change(ChangeTo.Cm)">CM</button>
                            <button class="btn" onclick="@Change(ChangeTo.Movie)">Video</button>
                        }
                        @if (isCM)
                        {
                            <button class="btn vote" onclick="Change(ChangeTo.Movie)"><img src="./img/icon/good.svg" alt="投票!" class="icon" /><span class="halfblank"></span>CMに投票する</button>
                        }
                    </div>
                </div>
                <div class="content">
                    <div  class="video">
                        @if (media == ChangeTo.Cm)
                        {
                            @((MarkupString)detail.cmUrl[0].Url);
                        }
                        else
                        {
                            @((MarkupString)detail.videoUrl[0].Url);
                        }
                    </div>
                    @*
                    <video controls class="video">
                        @if (media == ChangeTo.Cm)
                        {
                            @foreach (var item in detail.cmUrl)
                            {
                                <source src="@item.Url" />
                            }
                        }
                        else
                        {
                            @foreach (var item in detail.videoUrl)
                            {
                                <source src="@item.Url" />
                            }
                        }
                    </video>
                    *@
                </div>
            </section>
        }
        <section>
            <article class="contener">
                <div class="videocontener sectitles">
                    <div>
                        <h3 class="section_title">
                            <img src="./img/icon/map.svg" class="icon"/>
                            Address
                        </h3>
                        <p class="section_subtitle">場所</p>
                    </div>
                    @if (detail.location != null && detail.location.Split(",").Length >= 1){
                            <p class="contein">@((MarkupString)detail.location.Split(",")[0])</p>
                    }
                 </div>
                @if (detail.location != null && detail.location.Split(",").Length >= 1)
                {
                    <div class="atlas content">
                        <Atlas floorIdentify="Convert.ToByte(detail.location.Split(',')[1])"></Atlas>
                    </div>
                }
            </article>  
        </section>
        
    <section>
        <div class="detail">
            <h3 class="section_title">
                <img src="./img/icon/map.svg" class="icon"/>
                Detail
            </h3>
            <p class="section_subtitle">そのほか</p>
        </div>
        <article class="grid-contener">
            <div class="text">
                <div class="commentbox">
                    <span class="box-title">コメント</span>
                    <p>@detail.comment</p>
                </div>
            </div>
            <div class="btns">
                <p><button class="btn vote" @onclick="Vote">この団体に投票する</button></p>
                <p><a class="btn" href="@detail.contentUrl">オンラインコンテンツへ</a></p>
            </div>
        </article>
    </section>
</main>  
}else if(state == 3){
        <main>
        <div class="loading">
            <Bloom.Client.Pages.error._404 />
        </div>
    </main>
}
@if(isvote){
    <div class="vote">
        <Bloom.Client.Shared.vote.Vote close="Close" id="paramstr"/>
    </div>
}

@code {
    [Parameter]
    public string paramstr { get; set; }
    private Media poster = new Media();
    private bool isFun { set; get; }
    private bool isCM { set; get; }
    public Company? detail { set; get; }
    private bool isMovie { set; get; }
    private int floorCode { set; get; }
    public byte? state { set; get; } = 1;
    public string style = "hide";
    public string loading = string.Empty;
    private bool isvote;
    private ChangeTo media;
    private HubConnection? hubConnection;
    private enum ChangeTo
    {
        Cm = 1,
        Movie
    }

    protected override async Task OnInitializedAsync()
    {
        state = 1;
        if (paramstr == null)
        {
            nV.NavigateTo($"/Map", false);  
        }
        StateHasChanged(); 
        hubConnection = new HubConnectionBuilder().WithUrl(nV.ToAbsoluteUri("/grouphub")).Build();
        hubConnection.On<string>("ReceiveCompany", (message) =>
        {
            Console.WriteLine("Receive");
            var a = Encoding.UTF8.GetBytes(message);
            using (var stream = new MemoryStream(a, false))
            {
                XmlSerializer xs = new XmlSerializer(typeof(Group));
                Group? f = (Group?)xs.Deserialize(stream);
                if (f == null)
                {
                    Console.WriteLine("Result is null");
                    state = 3;
                    detail = null;
                }
                else
                {
                    if (f.posterUrl.Count > 1)
                    {
                        poster = f.posterUrl[0];
                    }
                    state = 2;
                    detail = f;
                    style = string.Empty;
                }
                Console.WriteLine("Resultchenge");
                StateHasChanged();
            }
        });
        await hubConnection.StartAsync();
        Console.WriteLine("Claim");
        await hubConnection.SendAsync("ClaimCompany", paramstr);
    }

    private async Task Change(ChangeTo identifer)
    {
        media = identifer;
        StateHasChanged();
    }

    private async Task Vote()
    {
        isvote = true;
        StateHasChanged();
    }

    private void Close()
    {
        isvote = false;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}