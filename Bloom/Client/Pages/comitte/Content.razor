@using Microsoft.AspNetCore.SignalR.Client
@using System.Text
@using System.IO
@using System.Xml.Serialization
@using Bloom.Client
@using Bloom.Shared

@page "/Content"

@inject NavigationManager nV

@implements IAsyncDisposable

@if(!iscompornent){
    <header class="">
        <div>
            <p class="title">イベント</p>
            <p class="subtile">Events</p>
        </div>
    </header>
}
<div class="cardlist">
    <a href="" class="l-wrapper card-radius">
        <article class="card">
            <div class="card__header">
                <p class="card__title">しばかっしー公式サイト</p>
                <div class="card__thumbnail">
                    <figure>
                        <img src="./img/index/shibakashi.png" alt="サムネイル" class="card__image">
                    </figure>
                </div>
            </div>
        </article>
    </a>
    <a href="" class="l-wrapper card-radius">
        <article class="card">
            <div class="card__header">
                <p class="card__title">Tシャツコンテスト</p>
                <div class="card__thumbnail">
                    <figure>
                        <img src="./img/index/shibakashi.png" alt="サムネイル" class="card__image">
                    </figure>
                </div>
            </div>
        </article>
    </a>
    <a href="" class="l-wrapper card-radius">
        <article class="card">
            <div class="card__header">
                <p class="card__title">イベント部門スタンプラリー</p>
                <div class="card__thumbnail">
                    <figure>
                        <img src="./img/index/shibakashi.png" alt="サムネイル" class="card__image">
                    </figure>
                </div>
            </div>
        </article>
    </a>
</div>


@code {
    [Parameter]
    public bool iscompornent { set; get; } = false;
    private HubConnection? hubConnection = null;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(nV.ToAbsoluteUri("/grouphub")).Build();
        hubConnection.On<string>("ReceiveCompany", (message) =>
        {
            Console.WriteLine("Receive");
            var a = Encoding.UTF8.GetBytes(message);
            using (var stream = new MemoryStream(a, false))
            {
                XmlSerializer xs = new XmlSerializer(typeof(Company));
                Company? f = (Company?)xs.Deserialize(stream);
                if (f == null)
                {
                    Console.WriteLine("Result is null");
                    state = 3;
                    detail = null;
                }
                else
                {
                    if (f.posterUrl.Count > 1)
                    {
                        poster = f.posterUrl[0];
                    }
                    state = 2;
                    detail = f;
                    style = string.Empty;
                }
                Console.WriteLine("Resultchenge");
                StateHasChanged();
            }
        });
        await hubConnection.StartAsync();
        Console.WriteLine("Claim");
        await hubConnection.SendAsync("ClaimCompany", paramstr);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
