@using Bloom.Client
@using Bloom.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using System.IO
@using Bloom.Client.Shared

@page "/Map"

@inject NavigationManager nV

@implements IAsyncDisposable
<h2>Map</h2>
<!--選択階マップ-->
<div class="tabs">
    <div class="mpheader">
        <!--建物を選択-->
        <div class="buildings">
            <InputSelect Value="@mapId" ValueChanged="@((Building mapId) => BuildingChenged(mapId))">
            <!--Buildingの数だけだけオプションを生み出す。-->
            @foreach (var Building in Buildings) {
                <option value="@Building.Key">@Building.Value[1]</option>
            }
            </InputSelect>
            <p>棟　</p>
        </div>
        <!--階を選択-->
        <div class="froor">
            <InputSelect Value="@Floor" ValueChanged="@((int id) => FloorChenged(id))">
                <!--選択された建物の回数分だけ1,2,3...というオプションを生み出す。-->
                @for (int i = 0; i < Int32.Parse(Buildings[mapId][0]); i++){
                    <option id="@i">@(i+1)</option>
                }
            </InputSelect>        
            <p>F</p>
        </div>
    </div>
    <!--マップ本体-->
    <div class="map">
        <img src="@current.floorMap.Url"/>
    </div>
</div>
<!--各団体リンク集-->
<div class="inside">
    @if (floors != null && floors[mapId] != null)
    {
        @foreach (var flooritems in floors[mapId])
        {
            <section class="floors">
                <h1>@flooritems.floorTitle</h1>
                <div  class="mapTile">
                    @foreach (var company in flooritems.groups)
                    {
                        //横長ポスターの場合
                        @if (company.posterUrl[0].isWide)
                        {
                            <div class="example-1 card">
				                <div class="wide">
					                <img src="@company.posterUrl[0].Url" class="thumbnail"/>
					                <div class="date_01">
						                <span class="day">@company.location</span>
						                <span class="month"></span>
					                </div>
					                <div class="data_01">
						                <div class="content">
							                <p class="card_maintitle card_href_05">@company.name</p>
							                <p class="text">@company.comment</p>
							                <div style = "width: 100%; text-align: center; margin: 2rem 0;">
                                                <a href="@("/Company/" + company.id)" class="gobtn">Go this page</a>
							                </div>
						                </div>
					                </div>
				                </div>
                            </div>
                        }
                        //縦長ポスターの場合
                        else
                        {
                            <a href="@("/Company/" + company.id)" class="example-1 card">
                                <div class="wrapper" style="background: url(@company.posterUrl[0].Url) 20% 1%/cover no-repeat;">
                                    <div class="date">
                                    <span class="day">@company.location</span>
                                    <span class="month"></span>
                                    </div>
                                    <div class="data">
                                        <div class="content">
                                            <p class="card_maintitle card_href_05">@company.name</p>
                                            <p class="text">@company.comment</p>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        }
                    }
                </div>
            </section>
        }
    }
    else
    {
        <h1>お探しの階に出店しているブースはございません。</h1>
    }
</div>


@code{
    /// <summary>
    ///　建物と、詳細のペア
    ///   Bloom.Shared.Building,string[]{階立て,建物名}。
    /// </summary>
    Dictionary<Building,string[]> Buildings = new Dictionary<Building, string[]>();
    private HubConnection? hubConnection = null;
    private Dictionary<Building,Floor[]>? floors = null;
    private readonly string offlineKey = "MapData";
    protected override async Task OnInitializedAsync()
    {
        var task = Establish();
        //ローカルストレージからのデータ再現を試行
        if (Shared.Contloller.LocalDataSaver.UseLocalSaver())
        {
            floors = await Shared.Contloller.LocalDataSaver.GetLocalData<Dictionary<Building,Floor[]>>(offlineKey);  
        }
        await task;
    }
    private Floor current = new Floor(){floorTitle="階数を選択してください。"};

    private async Task Retriever(Building structure,int floor)
    {
        //オフラインバッファに合ったら検索
        if (floors != null && floors[structure] != null && floors[structure].Length > 0)
        {
            try
            {
                var a = floors[structure][floor];
            }
            catch
            {
                if (await Establish())
                {
                    await hubConnection.SendAsync("ClaimFloorID");
                }
            }
        }
        //画面適応
        StateHasChanged();
    }

    //接続確立関数(接続可能性確認を兼任)
    private async Task<bool> Establish()
    {
        //ネットワークが生きてなかったら
        if (!System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable())
        {
            return false;
        }else if(hubConnection == null)
        {
            //サーバー接続が生きてなかったら
            hubConnection = new HubConnectionBuilder()
            .WithUrl(nV.ToAbsoluteUri("/MapHub"))
            .Build();
            hubConnection.On<string>("ReceiveFloor", async (message) =>
            {
                var raw = new Floor();
                await raw.ConvertFromJson(message);
                try
                {
                    floors[raw.building][raw.fllor] = raw;
                }catch (Exception e)
                {
                    Console.WriteLine(e);
                }
            //画面適応
                StateHasChanged();
            });
            hubConnection.On<string>("ReceiveFloorID", async (message) =>
            {
                var raw = new Floor();
                await raw.ConvertFromJson(message);
                if(Int32.Parse(raw.id) > Int32.Parse(floors[raw.building][raw.fllor].id))
                {
                    await hubConnection.InvokeAsync("ClaimFloor",new string[] {message});
                }
            //画面適応
                StateHasChanged();
            });  
            hubConnection.On<string>("ReceiveBuildings", async (message) =>
            {
                using (var ms = new MemoryStream())
                {
                    await ms.WriteAsync(System.Text.Encoding.UTF8.GetBytes(message));
                    Buildings = await JsonSerializer.DeserializeAsync<Dictionary<Building, string[]>>(ms);
                }
            });
            await hubConnection.StartAsync();
        }
        return true;
    }

    //建物変更時呼び出し関数
    private async Task BuildingChenged(Building value)
    {
        mapId = value;
        //画面適応
        StateHasChanged();
    }

    //階数変更時呼び出し関数
    private async Task FloorChenged(int value)
    {
        await Retriever(mapId,value);
    }

    //ページ遷移時の後始末
    public async ValueTask DisposeAsync()
    {
        string body = JsonSerializer.Serialize<Dictionary<Building, string[]>>(Buildings);
        var task = Shared.Contloller.LocalDataSaver.SetLocalData(offlineKey,body);
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        await task;
    }

    //Input 等の消してほしくないオブジェクト
    protected int Floor { get; set; }
    protected Building mapId { get; set; }
}