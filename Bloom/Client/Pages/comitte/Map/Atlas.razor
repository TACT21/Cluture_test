@using Microsoft.AspNetCore.SignalR.Client

@inject IJSRuntime js
@inject NavigationManager NavigationManager

@implements IAsyncDisposable


<img src="data:image/png;base64,@maps[floorIdentify]" width="200" height="100" alt="イヌとネズミ">

@code {
                /*format : xy
                x:building number
                sets{
                0,Gernal (y = 0)
                1,Central building (y <4)
                2,Highshool building(y < 6)
                3,Junior high school building (y < 5)
            4,hall building(y < 5)
            }
            y:Floor number
            (e.g.: 13 mean "3rd floor of central building")
    */
    [Parameter]
    public byte floorIdentify{ set; get;}
    private HubConnection? hubConnection = null;
    private Dictionary<byte, string> maps = new Dictionary<byte, string>();
    protected override async Task OnInitializedAsync()
    {
        var rawDate = await Map();
        var map = rawDate.Split(",");
        for (int i = 0; i < (map.Length / 2); i++)
        {
            try
            {
                maps.Add(Convert.ToByte(map[i * 2]), map[(i * 2) + 1]);
            }catch{}//損害なしより握り潰し
        }
    }

    async Task<string> Map()
    {
        string date = string.Empty;
        var result = await js.InvokeAsync<string>("LocalStorageGet", "Map");
        if(result == "")
        {
            hubConnection= new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/maphub")).Build();
            hubConnection.On<string>("ReceiveImages", (message) =>
            {
                date = message;
            });
            await hubConnection.StartAsync();
            await hubConnection.SendAsync("ClaimImages");
            for (var i = 0; i < 20; i++)
            {
                if(date != string.Empty)
                {
                    break;
                }
                await Task.Delay(500);
            }
            await js.InvokeVoidAsync("LocalStorageGet", ("Map," + date));
            result = date;
        }
        return result;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}