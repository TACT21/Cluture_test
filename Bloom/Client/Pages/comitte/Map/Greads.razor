@using Bloom.Client
@using Bloom.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using System.IO
@using Bloom.Client.Shared

@page "/Gread"
@page "/Gread/{gread}"

@inject NavigationManager nV
@inject IJSRuntime js

@implements IAsyncDisposable
@*以下HTML*@
<h2>学年別に探す</h2>
@foreach (var item in greads)
{
    <div id="@item.floorTitle">
        <div class="header">@item.floorTitle</div>
        <div>
            @foreach (var company in item.groups)
            {
                //横長ポスターの場合
                @if (company.posterUrl[0].isWide)
                {
                    <div class="example-1 card">
                        <div class="wide">
                            <img src="@company.posterUrl[0].Url" class="thumbnail" />
                            <div class="date_01">
                                <span class="day">@company.location</span>
                                <span class="month"></span>
                            </div>
                            <div class="data_01">
                                <div class="content">
                                    <p class="card_maintitle card_href_05">@company.name</p>
                                    <p class="text">@company.comment</p>
                                    <div style="width: 100%; text-align: center; margin: 2rem 0;">
                                        <a href="@URLConverter(company.id)" class="gobtn">Go this page</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                //縦長ポスターの場合
                else
                {
                    <a href="@URLConverter(company.id)" class="example-1 card">
                        <div class="wrapper" style="background: url(@company.posterUrl[0].Url) 20% 1%/cover no-repeat;">
                            <div class="date">
                                <span class="day">@company.location</span>
                                <span class="month"></span>
                            </div>
                            <div class="data">
                                <div class="content">
                                    <p class="card_maintitle card_href_05">@company.name</p>
                                    <p class="text">@company.comment</p>
                                </div>
                            </div>
                        </div>
                    </a>
                }
            }
        </div>
    </div>
}
@*ここまでHTML*@
@code {
    [Parameter]
    public string? gread { get; set; }
    private Floor[] greads = new Floor[0];
    private readonly string offlineKey = "MapData";
    private HubConnection? hubConnection = null;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(nV.ToAbsoluteUri("/GreadsHub"))
            .Build();
        var task = hubConnection.StartAsync();
        await hubConnection.InvokeAsync<Floor[]>("CleamGreads");
        //ローカルストレージからのデータ再現を試行
        if (Shared.Contloller.LocalDataSaver.UseLocalSaver())
        {
            var localdata = await Shared.Contloller.LocalDataSaver.GetLocalData<Dictionary<Building, Floor[]>>(offlineKey);
            using (MemoryStream ms = new MemoryStream())
            {
                var data = await JsonSerializer.DeserializeAsync<Dictionary<Building, string[]>>(ms);
            }
        }
    }

    private string URLConverter(string id)
    {
        return nV.ToAbsoluteUri("/Company/" + id).AbsoluteUri;
    }

    //ページ遷移時の後始末
    public async ValueTask DisposeAsync()
    {
        string body = JsonSerializer.Serialize<Floor[]>(greads);
        var task = Shared.Contloller.LocalDataSaver.SetLocalData(offlineKey, body);
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        await task;
    }

    //Input 等の消してほしくないオブジェクト
    protected int Floor { get; set; }
    protected Building mapid { get; set; }
}