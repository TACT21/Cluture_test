@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject NavigationManager navigation

<h3>Debug</h3>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var time1 = System.DateTime.Now;
        messages.Add($"{time1.ToString("dddd, MMMM dd yyyy")}: Conecting..");
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string>("DebugLog", (message) =>
        {
            var encodedMsg = $"{DateTime.Now.ToString("dddd, MMMM dd yyyy")}: {message}";
            Console.WriteLine(encodedMsg);
            messages.Add(encodedMsg);
            StateHasChanged();
        });
        await hubConnection.StartAsync();
        messages[0] = $"{DateTime.Now.ToString("dddd, MMMM dd yyyy")}: Conecting..(past at {new TimeSpan(DateTime.Now.Ticks - time1.Ticks).Seconds} sec,)";
    }


    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}