@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject  IAuthService authService
@inject IJSRuntime jsruntime
@using Test.Client.Scripts.Auth;
@using Test.Client.Services.Auth;

<PageTitle>Index</PageTitle>
<NavLink class="nav-link" href="login">Login_Test</NavLink>
<div class="form-group">
    <label>
        mailaddress:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        password:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send">Send</button>


<div style=@style class="modal">
    <div class="modal_content">
        <h1>Error</h1>
        @((MarkupString)errormessage)
        <button @onclick="Close_modal">Close</button>
    </div>
</div>

<Debug></Debug>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    public string? errormessage;
    public string style = "display:none";


    private async Task Send()
    {
        if (userInput != null && userInput != null)
        {
            LoginModel login = new LoginModel();
            login.UserID = userInput;
            login.Password = messageInput;
            Logintools tools = new Logintools();
            tools.jS = jsruntime;
            tools.nav = NavigationManager;
            await authService.LoginAsync(login,0,tools);
        }
    }

    public void Close_modal()
    {
            style = "display:none";
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}