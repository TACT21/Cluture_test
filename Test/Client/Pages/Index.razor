@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IJSRuntime jsruntime

<PageTitle>Index</PageTitle>
<NavLink class="nav-link" href="login">Login_Test</NavLink>
<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>


<div style=@style class="modal">
    <div class="modal_content">
        <h1>Error</h1>
        @((MarkupString)errormessage)
        <button @onclick="Close_modal">Close</button>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    public string? errormessage;
    public string style = "display:none";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl( NavigationManager.ToAbsoluteUri("/Loginhub"))
            .Build();

        hubConnection.On("ConectionOK", () =>
        {
            Console.WriteLine("Conection exist");
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            await jsruntime.InvokeVoidAsync("Login", new string[2] { NavigationManager.ToAbsoluteUri("/Loginhub").ToString(), hubConnection.ConnectionId });
        }
        else
        {
            style = "display:block";
            errormessage = "Lost conecrtion with Loginhub in server.";
        }
    }

    public void Close_modal()
    {
            style = "display:none";
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}